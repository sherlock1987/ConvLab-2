import pandas as pd
import os
import torch
import logging
import torch.nn as nn
import numpy as np
from convlab2.util.train_util import to_device
import torch.nn as nn
from torch import optim
import zipfile
import sys
import matplotlib.pyplot  as plt
import pickle
DEVICE = torch.device("cuda" if torch.cuda.is_available() else "cpu")
import torch.tensor as tensor
import copy


# idea4 pretrained G  *10

# idea4 pretrained G

# idea4 D_49

# idea4 pretrained D reward = log(D)

# idea4 D_49         reward = log(D)

# idea4 D_25         reward = log(D)

# PPO
# [0.6087499999999999, 0.658125, 0.6825000000000001, 0.7106250000000001, 0.7262499999999998, 0.739375, 0.7468750000000001, 0.74875, 0.75, 0.7512500000000001, 0.7537500000000001, 0.745, 0.754375, 0.74875, 0.750625, 0.749375, 0.749375, 0.74875, 0.7525, 0.74875, 0.7450000000000001, 0.744375, 0.7318749999999999, 0.7393750000000001, 0.73125, 0.73, 0.7350000000000001, 0.734375, 0.7406250000000001, 0.72875, 0.7293749999999999, 0.73875, 0.736875, 0.738125, 0.74, 0.7418750000000001, 0.73625, 0.74, 0.739375, 0.74125]
process =[]
success_rate = [0.6178571428571428, 0.6592857142857144, 0.6900000000000001, 0.7164285714285714, 0.7257142857142858, 0.7307142857142858, 0.7378571428571428, 0.7421428571428571, 0.7464285714285713, 0.7492857142857143, 0.7485714285714284, 0.7571428571428572, 0.7514285714285714, 0.7535714285714287, 0.7571428571428571, 0.7492857142857143, 0.7535714285714287, 0.7542857142857142, 0.7471428571428571, 0.7421428571428572, 0.7428571428571429, 0.7371428571428572, 0.7314285714285714, 0.7285714285714285, 0.7250000000000002, 0.7285714285714285, 0.7257142857142858, 0.7242857142857142, 0.7278571428571426, 0.7242857142857142]
idea4 = [0.618125, 0.648125, 0.6812499999999999, 0.705, 0.713125, 0.7281249999999999, 0.733125, 0.740625, 0.7493749999999999, 0.74625, 0.7474999999999999, 0.750625, 0.7487499999999999, 0.749375, 0.75625, 0.7506249999999999, 0.748125, 0.749375, 0.7431249999999999, 0.74375, 0.74, 0.745, 0.7400000000000001, 0.7356250000000001, 0.7431249999999999, 0.7331249999999999, 0.73625, 0.735625, 0.730625, 0.734375]

baseline_np = np.array(process)
mean = np.mean(baseline_np,axis = 0)
print(list(mean))
# # begin writing to xls
# writer = pd.ExcelWriter('Save_Excel.xlsx')
# data_df.to_excel(writer,'page_1',float_format='%.5f') # float_format 控制精度
# writer.save()
# print(list(mean))
# begin drawing
axis = [i for i in range(len(success_rate))]
plt.plot(axis, success_rate)
plt.plot(axis, idea4)
plt.legend(["25", "50"], loc='upper right')
my_y_ticks = np.arange(0.6, 1, 0.05)
plt.yticks(my_y_ticks)
plt.xlabel('Number of Epoch')
plt.ylabel('Success rate')
plt.show()

